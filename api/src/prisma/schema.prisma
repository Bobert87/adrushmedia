// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator erd {
//   provider    = "prisma-erd-generator"
//   theme       = "forest"
//   ignoreEnums = false
// }

// Define the Driver table
model Driver {
  id                 Int       @id @default(autoincrement())
  firstName          String
  lastName           String
  email              String
  alternativeEmail   String?
  phone              String
  alternativePhone   String?
  countryISO         String    @db.VarChar(2)
  countryName        String
  address            String
  state              String?
  city               String?
  department         String?
  municipality       String?
  zone               String?
  driversLicense     String
  driversLicenseURL  String
  rideSharingCompany String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())
  deletedAt          DateTime?
  defaultGeoZoneId   Int?
}

enum AccountStatus {
  ACTIVE // USER
  PAUSED // USER
  OVERDUE // SYSTEM
  MAXED_OUT // SYSTEM
  DELETED
}

// Define the Publisher table
model Publisher {
  id          Int           @id @default(autoincrement())
  name        String
  taxNumber   String
  bank        String
  accountType String
  bankAccount String
  contact     String
  email       String
  phone       String
  address     String
  term        Term // net 30, net 60, net 90, prepaid
  creditLimit Decimal // What is the the Publisher can be owned at any time.
  status      AccountStatus
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  deletedAt   DateTime?
  timezone    String?
  assets      Asset[]
}

enum AssetType {
  VEHICLE
  LOCATION
}

// Define the Asset table
model Asset {
  id           Int           @id @default(autoincrement())
  type         AssetType
  name         String
  description  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  deletedAt    DateTime?
  publisherId  Int
  publisher    Publisher     @relation(fields: [publisherId], references: [id])
  devices      Device[]
  assetDetails AssetDetail[]
}

enum FieldType {
  STRING
  FLOAT
  INT
  BOOLEAN
  DATE
}

model AssetDetail {
  id        Int       @id @default(autoincrement())
  assetId   Int
  asset     Asset     @relation(fields: [assetId], references: [id])
  field     String
  type      FieldType
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
}

enum Placement {
  VEHICLE_ROOF
  VEHICLE_INTERIOR
  VEHICLE_SIDE
  VEHICLE_BACK
  LOCATION_OUTDOOR
  LOCATION_INDOOR
}

enum VehicleType {
  SEDAN
  HATCHBACK
  SUV
  TRUCK
  VAN
  BUS
  PUBLIC_TRANSPORT
}

enum LocationType {
  AIRPORT
  HOTEL
  RESTAURANT
  MALL
  GAS_STATION
  PARK
  HOSPITAL
  PHARMACY
  GYM
  BAR
  CAFE
  BAKERY
  GROCERY
  SUPERMARKET
  CONVENIENCE_STORE
  SHOPPING_MALL
  BUS_STATION
  TRAIN_STATION
  PARKING
  CAR_WASH
  ROAD
  HIGHWAY
  WALKWAY
}

enum DeviceType {
  CARTOP
  TABLET
  BILLBOARD
  SMARTTV
}

enum DeviceStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

// Define the Device table
model Device {
  id            Int            @id @default(autoincrement())
  type          DeviceType
  status        DeviceStatus
  placement     Placement
  make          String
  model         String
  screenWidth   Int
  screenHeight  Int
  resolution    String
  os            String
  osVersion     String
  serialNumber  String
  assetId       Int
  asset         Asset          @relation(fields: [assetId], references: [id])
  adimpressions AdImpression[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  deletedAt     DateTime?
}

enum AdvertiserType {
  AGENCY
  BRAND
  INDIVIDUAL
}

enum Term {
  NET_15  
  NET_30
  NET_60
  NET_90
  PREPAID
}

// Define the Advertiser table
model Advertiser {
  id            Int            @id @default(autoincrement())
  name          String
  type          AdvertiserType
  email         String
  phone         String
  address       String
  taxNumber     String
  term          Term // net 30, net 60, net 90, prepaid
  status        AccountStatus
  lastStatus    AccountStatus?
  maxTermCredit Decimal
  timezone      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  deletedAt     DateTime?
  campaigns     Campaign[]
  invoices      Invoice[]
  adImpressions   AdImpression[]
}

enum CampaignStatus {
  DRAFT
  PENDING
  ACTIVE
  PAUSED
  ADVERTISER_PAUSED
  MAXED_OUT_DAY
  MAXED_OUT_MONTH
  COMPLETED
  CANCELLED
}

enum AdStatus {
  DRAFT
  PENDING
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

// Define the Campaign table
model Campaign {
  id            Int            @id @default(autoincrement())
  advertiserId  Int
  name          String
  brand         String
  maxBid        Float //Max bid per minute
  dailyBudget   Decimal?
  monthlyBudget Decimal?
  status        CampaignStatus
  lastStatus    CampaignStatus?
  startDate     DateTime
  endDate       DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  deletedAt     DateTime?
  advertiser    Advertiser     @relation(fields: [advertiserId], references: [id])
  ads           Ad[]
  tags          CampaignTag[]
  filters       Filter[]
  adImpressions AdImpression[]
}

// Define the Ad table
model Ad {
  id               Int              @id @default(autoincrement())
  campaignId       Int
  name             String
  targetDeviceType DeviceType
  creativeFormat   String
  creativeURL      String
  landingURL       String
  duration         Int              @default(10000)
  status           AdStatus
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now())
  deletedAt        DateTime?
  campaign         Campaign         @relation(fields: [campaignId], references: [id])
  scheduleDetails  ScheduleDetail[]
  adImpressions    AdImpression[]
}

// Define the Polygon table
model Polygon {
  id          Int           @id @default(autoincrement())
  name        String
  coordinates Float[]
  polygonZone PolygonZone[]
}

// Define the PolygonGroup table
model Zone {
  id        Int           @id @default(autoincrement())
  name      String
  areas     PolygonZone[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
  deletedAt DateTime?
}

model PolygonZone {
  id        Int     @id @default(autoincrement())
  polygonId Int
  zoneId    Int
  polygon   Polygon @relation(fields: [polygonId], references: [id])
  zone      Zone    @relation(fields: [zoneId], references: [id])
}

// Define the Tag table
model Tag {
  id          Int           @id @default(autoincrement())
  name        String
  CampaignTag CampaignTag[]
}

// Define the CampaignTag table
model CampaignTag {
  id         Int      @id @default(autoincrement())
  tagId      Int
  campaignId Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  campaign   Campaign @relation(fields: [campaignId], references: [id])
}

enum FilterType {
  GEO
  DEVICE
  VEHICLE
  HOURS
  DAYS
  WEATHER
}

enum FilterOperations {
  EQUALS
  NOT_EQUALS
  GREATER_THAN
  LESS_THAN
  GREATER_THAN_OR_EQUAL
  LESS_THAN_OR_EQUAL
  BETWEEN
  NOT_BETWEEN
  IN
  NOT_IN
  LIKE
  NOT_LIKE
  IS_NULL
  IS_NOT_NULL
}

model Filter {
  id         Int              @id @default(autoincrement())
  name       String
  type       FilterType
  operation  FilterOperations
  value      String
  campaignId Int
  campaign   Campaign         @relation(fields: [campaignId], references: [id])
}

// Define the Schedule table
model Schedule {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  deliveredAt     DateTime         @default(now())
  deviceId        Int
  latitude        Float
  longitude       Float
  scheduleDetails ScheduleDetail[]
  adImpressions   AdImpression[]
}

// Define the ScheduleDetail table
model ScheduleDetail {
  id         Int      @id @default(autoincrement())
  scheduleId Int
  adId       Int
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  ad         Ad       @relation(fields: [adId], references: [id])
}

// Define the AdImpression table
model AdImpression {
  id         Int      @id @default(autoincrement())
  advertiserId Int
  campaignId Int
  scheduleId Int
  adId       Int
  deviceId   Int
  latitude   Float
  longitude  Float
  amount     Decimal
  createdAt  DateTime @default(now())
  schedule   Schedule @relation(fields: [scheduleId], references: [id])  
  ad         Ad       @relation(fields: [adId], references: [id])
  advertiser Advertiser @relation(fields: [advertiserId], references: [id])
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  device     Device   @relation(fields: [deviceId], references: [id])
}

model Invoice {
  id           Int           @id @default(autoincrement())  
  advertiserId Int
  advertiser   Advertiser    @relation(fields: [advertiserId], references: [id])
  dueDate      DateTime
  paidAt       DateTime?
  amount       Decimal
  taxes        Decimal
  status       InvoiceStatus @default(SENT)
  lineItems    LineItem[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  deletedAt    DateTime?
}

model LineItem{
  id Int @id @default(autoincrement())
  invoiceId Int
  invoice Invoice @relation(fields: [invoiceId], references: [id])
  description String
  quantity Int
  unitPrice Decimal
  total Decimal
  createdAt DateTime @default(now())
	@@map("lineItem")
}

enum InvoiceStatus {
  SENT
  PAID
  OVERDUE
  CANCELLED
}
