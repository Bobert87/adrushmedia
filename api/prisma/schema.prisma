// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the Driver table
model Driver {
  id                 Int       @id @default(autoincrement())  
  firstName          String
  lastName           String
  email              String
  alternativeEmail   String?
  phone              String
  alternativePhone   String?
  countryISO         String    @db.VarChar(2)
  countryName        String
  address            String
  state              String?
  city               String?
  department         String?
  municipality       String?
  zone               String?
  driversLicense     String
  driversLicenseURL  String
  rideSharingCompany String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())
  deletedAt          DateTime?
  vehicleId          Int?
  vehicle            Vehicle?
  defaultGeoZoneId   Int?
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  MAXED_OUT
  DELETED
}

// Define the Publisher table
model Publisher {
  id          Int           @id @default(autoincrement())
  name        String
  taxNumber   String
  bank        String
  accountType String
  bankAccount String
  contact     String
  email       String
  phone       String
  address     String
  term        Term // net 30, net 60, net 90, prepaid
  creditLimit Decimal // What is the the Publisher can be owned at any time.
  status      AccountStatus
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  deletedAt   DateTime?  
  timezone    String?
  assets      Asset[]
}

enum AssetType {
  FLEET
  LOCATIONS
}

// Define the Asset table
model Asset {
  id          Int         @id @default(autoincrement())
  type        AssetType
  name        String
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  deletedAt   DateTime?
  publisherId Int
  publisher   Publisher   @relation(fields: [publisherId], references: [id])  
  vehicles     AssetVehicle[]
  locations   AssetLocation[]  
}

model AssetVehicle {
  id        Int      @id @default(autoincrement())
  assetId   Int
  vehicleId Int
  asset     Asset    @relation(fields: [assetId], references: [id])
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])

}

model VehiclePlacement {
  id        Int      @id @default(autoincrement())
  vehicleId Int
  placementId Int
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  placement Placement @relation(fields: [placementId], references: [id])
}

model AssetLocation {
  id        Int      @id @default(autoincrement())
  assetId   Int
  locationId Int
  asset     Asset    @relation(fields: [assetId], references: [id])
  location  Location  @relation(fields: [locationId], references: [id])
}

enum PlacementType {
  VEHICLE_ROOF
  VEHICLE_INTERIOR
  VEHICLE_SIDE
  VEHICLE_BACK
  LOCATION_OUTDOOR
  LOCATION_INDOOR
}

// Define the Placement table
model Placement {
  id        Int           @id @default(autoincrement())
  name      String
  type      PlacementType
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
  deletedAt DateTime?    
  deviceId  Int? @unique
  device    Device?        @relation(fields: [deviceId], references: [id])
  vehicles  VehiclePlacement[]
  locations LocationPlacement[]
}

enum VehicleType {
  SEDAN
  HATCHBACK
  SUV
  TRUCK
  VAN
  BUS
  PUBLIC_TRANSPORT
}

// Define the Car table
model Vehicle {
  id            Int         @id @default(autoincrement())
  type          VehicleType
  make          String
  model         String
  trim          String
  color         String
  year          Int
  licensePlate  String
  vin           String
  numberOfSeats Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  deletedAt     DateTime?
  placements    VehiclePlacement[]  
  driverId      Int?        @unique
  driver        Driver?     @relation(fields: [driverId], references: [id])  
  assetId       Int
  assets        AssetVehicle[]
}

enum LocationType {
  AIRPORT
  HOTEL
  RESTAURANT
  MALL
  GAS_STATION
  PARK
  HOSPITAL
  PHARMACY
  GYM
  BAR
  CAFE
  BAKERY
  GROCERY
  SUPERMARKET
  CONVENIENCE_STORE
  SHOPPING_MALL
  BUS_STATION
  TRAIN_STATION
  PARKING
  CAR_WASH
  ROAD
  HIGHWAY
  WALKWAY
}

// Define the Location table
model Location {
  id          Int          @id @default(autoincrement())
  type        LocationType
  name        String
  address     String
  city        String
  state       String
  country     String
  postalCode  String
  description String
  latitude    Float
  longitude   Float
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  deletedAt   DateTime?  
  placements LocationPlacement[]
  assets      AssetLocation[]
}

model LocationPlacement {
  id          Int      @id @default(autoincrement())
  locationId  Int
  placementId Int
  location    Location  @relation(fields: [locationId], references: [id])
  placement   Placement  @relation(fields: [placementId], references: [id])
}

enum DeviceType {
  CARTOP
  TABLET
  BILLBOARD
  SMARTTV
}

// Define the Device table
model Device {
  id           Int        @id @default(autoincrement())
  type         DeviceType
  make         String
  model        String
  screenWidth  Int
  screenHeight Int
  resolution   String
  os           String
  osVersion    String
  serialNumber String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  deletedAt    DateTime?    
  placement    Placement?
  
}

enum AdvertiserType {
  AGENCY
  BRAND
  INDIVIDUAL
}

enum Term {
  NET_30
  NET_60
  NET_90
  PREPAID
}

// Define the Advertiser table
model Advertiser {
  id        Int            @id @default(autoincrement())
  name      String
  type      AdvertiserType
  email     String
  phone     String
  address   String
  term      Term // net 30, net 60, net 90, prepaid
  status    AccountStatus
  timezone  String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())
  deletedAt DateTime?
  campaigns Campaign[]
}

enum CampaignStatus {
  DRAFT
  PENDING
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

// Define the Campaign table
model Campaign {
  id           Int            @id @default(autoincrement())
  advertiserId Int
  name         String
  brand        String
  maxBid       Float
  budget       Decimal
  status       CampaignStatus
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  deletedAt    DateTime?
  advertiser   Advertiser     @relation(fields: [advertiserId], references: [id])
  ads          Ad[]
  tags         CampaignTag[]
  filters      Filter[]
}

// Define the Ad table
model Ad {
  id               Int              @id @default(autoincrement())
  campaignId       Int
  name             String
  targetDeviceType String
  creativeFormat   String
  creativeURL      String
  landingURL       String
  status           String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now())
  deletedAt        DateTime?
  campaign         Campaign         @relation(fields: [campaignId], references: [id])
  scheduleDetails  ScheduleDetail[]
}

// Define the Polygon table
model Polygon {
  id                  Int            @id @default(autoincrement())
  name                String
  coordinates         Float[]
  polygonGroupPolygon PolygoneZone[]
}

// Define the PolygonGroup table
model Zone {
  id        Int            @id @default(autoincrement())
  name      String
  areas     PolygoneZone[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())
  deletedAt DateTime?
}

model PolygoneZone {
  id        Int     @id @default(autoincrement())
  polygonId Int     
  zoneId    Int     
  polygon   Polygon @relation(fields: [polygonId], references: [id])
  zone      Zone    @relation(fields: [zoneId], references: [id])
}

// Define the Tag table
model Tag {
  id          Int           @id @default(autoincrement())
  name        String
  CampaignTag CampaignTag[]
}

// Define the CampaignTag table
model CampaignTag {
  id         Int      @id @default(autoincrement())
  tagId      Int
  campaignId Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  campaign   Campaign @relation(fields: [campaignId], references: [id])
}

enum FilterType {
  GEO
  DEVICE
  VEHICLE
  HOURS
  DAYS
  WEATHER
}

enum FilterOperations {
  EQUALS
  NOT_EQUALS
  GREATER_THAN
  LESS_THAN
  GREATER_THAN_OR_EQUAL
  LESS_THAN_OR_EQUAL
  BETWEEN
  NOT_BETWEEN
  IN
  NOT_IN
  LIKE
  NOT_LIKE
  IS_NULL
  IS_NOT_NULL
}

model Filter {
  id         Int              @id @default(autoincrement())
  name       String
  type       FilterType
  operation  FilterOperations
  value      String
  campaignId Int
  campaign   Campaign         @relation(fields: [campaignId], references: [id])
}

// Define the Schedule table
model Schedule {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  deliveredAt     DateTime
  deviceId        Int
  latitude        Float
  longitude       Float
  h3Index         String
  scheduleDetails ScheduleDetail[]
}

// Define the ScheduleDetail table
model ScheduleDetail {
  id         Int      @id
  scheduleId Int
  adId       Int
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  ad         Ad       @relation(fields: [adId], references: [id])
}

// Define the AdImpression table
model AdImpression {
  id          Int      @id
  scheduleId  Int
  adId        Int
  coordinate  String
  locationId  Float
  deliveredAt DateTime
}
